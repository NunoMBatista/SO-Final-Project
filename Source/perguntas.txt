!!! INITIALIZATION !!!
This program starts by reading the configuration file 
and storing the correct parameters. It then calls the 
initializer function, creating the semaphores, the 
the shared memory segments, the message queue, the names pipes, the monitor
engine and the ARM.

The ARM will then create the sender and receiver threads, as well as the 
authorization engines and their respective unnamed pipes. 

The monitor engine, on the other hand, will just create a thread for the 
backoffice user's periodic notifications.

The program is now ready to receive the user's input and wait for a SIGINT
signal to terminate.

!!! ARM !!!
The sender thread is now waiting for a notification from the receiver thread
which will be sent once it has received a request from a user and sent it to 
one of the two queues. 

Once notified, the sender thread will wait until a authorization engine is 
available for the request to be assigned to, this is done via the engines_sem,
whose value is the number of currently available engines.

If the receiver thread fills up one of the queues, the extra auth engine is 
deployed, and if the sender thread empties both of the queues to less than
half of their capacity, the extra auth engine is removed.

!!! AUTH ENGINE !!! 
The auth engine's work loop is simple, it waits for a message to arrive 
to it's unnamed pipe, once it does, it parses the message accordingly and
sends a notification to the monitor engine for it to check the state of the 
shared memory.

!!! MONITOR ENGINE !!! 
This process waits for a notification from the auth engines, once it receives
it, it checks the shared memory for the current state of the system and
sends it to the backoffice user if requested or it sends a notification 
to the mobile users informing them of their already spent plafond. This is
done via de message queue. Moreover, there's a thread that sends a periodic
notification to the backoffice user every 30 seconds with the current state
of the system. 

!!! MOBILE USER !!! 
The mobile user is responsible for sending different types of periodic requests to 
the ARM via the USER_PIPE with 3 threads, one for each type of request.

Theres another thread that waits for notifications from the system.

!!! BACKOFFICE USER !!!
The backoffice user can send two types of requests to the system via the BACK_PIPE, 
one to check the current state of the system and another to reset the shared memory stats.

!!! CLEANUP !!!
When the system receives a SIGINT signal, every process 
will ignore it except for the system manager, the main process.
The system manager will then send a SIGTERM signal to the ARM
process, which will terminate the receiver and the sender threads.
Once they are terminated, the ARM will send a SIGTERM to every
auth engine, they will then finish processing their current requests
and exit. When they exit, the ARM will also exit. Now, the system manager
sends a SIGTERM to the monitor engine, which will also terminate.
Finally, the system manager will then clean the IPC resources, free the 
allocated memory and terminate.
